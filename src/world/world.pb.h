// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#ifndef PROTOBUF_world_2eproto__INCLUDED
#define PROTOBUF_world_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_world_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPositionImpl();
void InitDefaultsPosition();
void InitDefaultsPieceOfLandImpl();
void InitDefaultsPieceOfLand();
void InitDefaultsReqImpl();
void InitDefaultsReq();
void InitDefaultsResImpl();
void InitDefaultsRes();
inline void InitDefaults() {
  InitDefaultsPosition();
  InitDefaultsPieceOfLand();
  InitDefaultsReq();
  InitDefaultsRes();
}
}  // namespace protobuf_world_2eproto
namespace freedom {
namespace world {
class PieceOfLand;
class PieceOfLandDefaultTypeInternal;
extern PieceOfLandDefaultTypeInternal _PieceOfLand_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Req;
class ReqDefaultTypeInternal;
extern ReqDefaultTypeInternal _Req_default_instance_;
class Res;
class ResDefaultTypeInternal;
extern ResDefaultTypeInternal _Res_default_instance_;
}  // namespace world
}  // namespace freedom
namespace freedom {
namespace world {

// ===================================================================

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freedom.world.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const PROTOBUF_FINAL { return New(NULL); }

  Position* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:freedom.world.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_world_2eproto::TableStruct;
  friend void ::protobuf_world_2eproto::InitDefaultsPositionImpl();
};
// -------------------------------------------------------------------

class PieceOfLand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freedom.world.PieceOfLand) */ {
 public:
  PieceOfLand();
  virtual ~PieceOfLand();

  PieceOfLand(const PieceOfLand& from);

  inline PieceOfLand& operator=(const PieceOfLand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PieceOfLand(PieceOfLand&& from) noexcept
    : PieceOfLand() {
    *this = ::std::move(from);
  }

  inline PieceOfLand& operator=(PieceOfLand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PieceOfLand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PieceOfLand* internal_default_instance() {
    return reinterpret_cast<const PieceOfLand*>(
               &_PieceOfLand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PieceOfLand* other);
  friend void swap(PieceOfLand& a, PieceOfLand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PieceOfLand* New() const PROTOBUF_FINAL { return New(NULL); }

  PieceOfLand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PieceOfLand& from);
  void MergeFrom(const PieceOfLand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PieceOfLand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .freedom.world.Position pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::freedom::world::Position& pos() const;
  ::freedom::world::Position* release_pos();
  ::freedom::world::Position* mutable_pos();
  void set_allocated_pos(::freedom::world::Position* pos);

  // int32 pos_matter_type = 4;
  void clear_pos_matter_type();
  static const int kPosMatterTypeFieldNumber = 4;
  ::google::protobuf::int32 pos_matter_type() const;
  void set_pos_matter_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:freedom.world.PieceOfLand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::freedom::world::Position* pos_;
  ::google::protobuf::int32 pos_matter_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_world_2eproto::TableStruct;
  friend void ::protobuf_world_2eproto::InitDefaultsPieceOfLandImpl();
};
// -------------------------------------------------------------------

class Req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freedom.world.Req) */ {
 public:
  Req();
  virtual ~Req();

  Req(const Req& from);

  inline Req& operator=(const Req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req(Req&& from) noexcept
    : Req() {
    *this = ::std::move(from);
  }

  inline Req& operator=(Req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req* internal_default_instance() {
    return reinterpret_cast<const Req*>(
               &_Req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Req* other);
  friend void swap(Req& a, Req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req* New() const PROTOBUF_FINAL { return New(NULL); }

  Req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Req& from);
  void MergeFrom(const Req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:freedom.world.Req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend struct ::protobuf_world_2eproto::TableStruct;
  friend void ::protobuf_world_2eproto::InitDefaultsReqImpl();
};
// -------------------------------------------------------------------

class Res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:freedom.world.Res) */ {
 public:
  Res();
  virtual ~Res();

  Res(const Res& from);

  inline Res& operator=(const Res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Res(Res&& from) noexcept
    : Res() {
    *this = ::std::move(from);
  }

  inline Res& operator=(Res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Res* internal_default_instance() {
    return reinterpret_cast<const Res*>(
               &_Res_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Res* other);
  friend void swap(Res& a, Res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Res* New() const PROTOBUF_FINAL { return New(NULL); }

  Res* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Res& from);
  void MergeFrom(const Res& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:freedom.world.Res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend struct ::protobuf_world_2eproto::TableStruct;
  friend void ::protobuf_world_2eproto::InitDefaultsResImpl();
};
// ===================================================================

class IWorldService_Stub;

class IWorldService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline IWorldService() {};
 public:
  virtual ~IWorldService();

  typedef IWorldService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Echo(::google::protobuf::RpcController* controller,
                       const ::freedom::world::Req* request,
                       ::freedom::world::Res* response,
                       ::google::protobuf::Closure* done);
  virtual void Move(::google::protobuf::RpcController* controller,
                       const ::freedom::world::Req* request,
                       ::freedom::world::Res* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(IWorldService);
};

class IWorldService_Stub : public IWorldService {
 public:
  IWorldService_Stub(::google::protobuf::RpcChannel* channel);
  IWorldService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~IWorldService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements IWorldService ------------------------------------------

  void Echo(::google::protobuf::RpcController* controller,
                       const ::freedom::world::Req* request,
                       ::freedom::world::Res* response,
                       ::google::protobuf::Closure* done);
  void Move(::google::protobuf::RpcController* controller,
                       const ::freedom::world::Req* request,
                       ::freedom::world::Res* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(IWorldService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// int32 x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Position::x() const {
  // @@protoc_insertion_point(field_get:freedom.world.Position.x)
  return x_;
}
inline void Position::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:freedom.world.Position.x)
}

// int32 y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Position::y() const {
  // @@protoc_insertion_point(field_get:freedom.world.Position.y)
  return y_;
}
inline void Position::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:freedom.world.Position.y)
}

// -------------------------------------------------------------------

// PieceOfLand

// .freedom.world.Position pos = 1;
inline bool PieceOfLand::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void PieceOfLand::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
inline const ::freedom::world::Position& PieceOfLand::pos() const {
  const ::freedom::world::Position* p = pos_;
  // @@protoc_insertion_point(field_get:freedom.world.PieceOfLand.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::freedom::world::Position*>(
      &::freedom::world::_Position_default_instance_);
}
inline ::freedom::world::Position* PieceOfLand::release_pos() {
  // @@protoc_insertion_point(field_release:freedom.world.PieceOfLand.pos)
  
  ::freedom::world::Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::freedom::world::Position* PieceOfLand::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::freedom::world::Position;
  }
  // @@protoc_insertion_point(field_mutable:freedom.world.PieceOfLand.pos)
  return pos_;
}
inline void PieceOfLand::set_allocated_pos(::freedom::world::Position* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:freedom.world.PieceOfLand.pos)
}

// int32 pos_matter_type = 4;
inline void PieceOfLand::clear_pos_matter_type() {
  pos_matter_type_ = 0;
}
inline ::google::protobuf::int32 PieceOfLand::pos_matter_type() const {
  // @@protoc_insertion_point(field_get:freedom.world.PieceOfLand.pos_matter_type)
  return pos_matter_type_;
}
inline void PieceOfLand::set_pos_matter_type(::google::protobuf::int32 value) {
  
  pos_matter_type_ = value;
  // @@protoc_insertion_point(field_set:freedom.world.PieceOfLand.pos_matter_type)
}

// -------------------------------------------------------------------

// Req

// string message = 1;
inline void Req::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req::message() const {
  // @@protoc_insertion_point(field_get:freedom.world.Req.message)
  return message_.GetNoArena();
}
inline void Req::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freedom.world.Req.message)
}
#if LANG_CXX11
inline void Req::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freedom.world.Req.message)
}
#endif
inline void Req::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freedom.world.Req.message)
}
inline void Req::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freedom.world.Req.message)
}
inline ::std::string* Req::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:freedom.world.Req.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req::release_message() {
  // @@protoc_insertion_point(field_release:freedom.world.Req.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:freedom.world.Req.message)
}

// -------------------------------------------------------------------

// Res

// string message = 1;
inline void Res::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Res::message() const {
  // @@protoc_insertion_point(field_get:freedom.world.Res.message)
  return message_.GetNoArena();
}
inline void Res::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:freedom.world.Res.message)
}
#if LANG_CXX11
inline void Res::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:freedom.world.Res.message)
}
#endif
inline void Res::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:freedom.world.Res.message)
}
inline void Res::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:freedom.world.Res.message)
}
inline ::std::string* Res::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:freedom.world.Res.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Res::release_message() {
  // @@protoc_insertion_point(field_release:freedom.world.Res.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Res::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:freedom.world.Res.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace world
}  // namespace freedom

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_world_2eproto__INCLUDED
